plugins {
    id 'java'
    id "com.github.spotbugs" version "4.7.9"
    id 'checkstyle'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
group 'software.aws.neptune.jdbc'
version '1.0-SNAPSHOT'
description 'neptune-jdbc-driver'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
}

// Silently agree to build scan terms.
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.events("passed", "skipped", "failed")
}

/**
 * CheckStyle Plugin
 */
apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.37'
    configFile file("config/checkstyle/checkstyle-rules.xml")
    ignoreFailures = false
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

/**
 * SpotBugs Plugin
 */
spotbugs {
    showStackTraces = false
    reportsDir = file("$buildDir/reports/spotbugs")
    ignoreFailures = false
    includeFilter = file("config/spotbugs/spotbugs-exclude.xml")
}
spotbugsMain {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}
spotbugsTest {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test.xml")
        }
    }
}

task checkSpotBugsMainReport {
    doLast {
        def xmlReport = spotbugsMain.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

tasks.register('licenseAndNotice') {
    copy {
        from "${rootDir}/LICENSE"
        into 'src/main/resources'
    }
    copy {
        from "${rootDir}/NOTICE"
        into 'src/main/resources'
    }
}

task checkSpotBugsTestReport {
    doLast {
        def xmlReport = spotbugsTest.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

spotbugsMain.finalizedBy checkSpotBugsMainReport
spotbugsTest.finalizedBy checkSpotBugsTestReport

/**
 * JaCoCo Plugin
 */
jacoco {
    toolVersion = "0.8.5"
}
jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: ['**janino**', '**commons**'])
        }))
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
            ]
            limit {
                counter = 'LINE'
                minimum = 0.00
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

/**
 * License Plugin
 */
license {
    header =  project.file('license-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    exclude "**/*.properties"
    exclude "**/*.jar"
    headerDefinitions {
        slash_star_with_space {
            firstLine = '/*'
            endLine   = ' *\n */\n'
            beforeEachLine = ' * '
            firstLineDetectionPattern = '/\\*'
            lastLineDetectionPattern  = ' \\*\n \\*/\n'
        }
    }
    mapping {
        java = 'slash_star_with_space'
    }
}

repositories {
    mavenCentral()
}

ext {
    calciteVersion = '1.26.0'
    log4jVersion = '2.13.3'
    lombokVersion = '1.18.16'
    jupiterVersion = '5.4.0'
    neo4jDBVersion = '3.5.19'
    neo4jDriverVersion = '4.0.0'
    puppyCrawlVersion = '8.8'
    findBugsVersion = '3.0.1'
    awsSdkVersion = '1.11.932'
    gremlinVersion = '3.4.8'
    slf4jVersion = '1.7.29'
    rdf4jVersion = '3.5.0'
    amazonSigv4SignerVersion = '2.1.1'
    nettyVersion = '4.1.52.Final'
}

subprojects {
    tasks.withType(Test) {
        // Gradle documentation suggests using this number of cores.
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

dependencies {
    // Local sql-gremlin build.
    implementation project(":sql-gremlin")

    // Dependencies
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.apache.tinkerpop', name: 'gremlin-driver', version: gremlinVersion
    implementation group: 'com.amazonaws', name: 'amazon-neptune-sparql-java-sigv4', version: amazonSigv4SignerVersion
    implementation group: 'com.amazonaws', name: 'amazon-neptune-gremlin-java-sigv4', version: '1.0'
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'io.netty', name: 'netty-all', version: nettyVersion
    implementation group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: neo4jDriverVersion
    implementation group: 'org.apache.jena', name: 'jena-arq', version: '4.2.0'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation group: 'org.apache.calcite', name: 'calcite-core', version: calciteVersion
    implementation group: 'org.apache.calcite', name: 'calcite-linq4j', version: calciteVersion
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compileOnly group: 'com.puppycrawl.tools', name: 'checkstyle', version: puppyCrawlVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    // Testing
    testImplementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    testImplementation  group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.0.0'
    testImplementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4'
    testImplementation group: 'org.neo4j.test', name: 'neo4j-harness', version: neo4jDBVersion
    testImplementation group: 'org.neo4j.community', name: 'it-test-support', version: neo4jDBVersion
    testImplementation group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jDBVersion, classifier: "tests"
    testImplementation group: 'org.neo4j', name: 'neo4j-io', version: neo4jDBVersion, classifier: "tests"
    testImplementation 'org.codehaus.janino:janino:3.1.0'
    testImplementation group: 'com.google.code.findbugs', name: 'annotations', version: findBugsVersion
    testImplementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    testImplementation group: 'org.apache.jena', name: 'jena-fuseki-main', version: '3.17.0'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testCompileOnly group: 'com.google.code.findbugs', name: 'annotations', version: findBugsVersion
    testCompileOnly group: 'com.puppycrawl.tools', name: 'checkstyle', version: puppyCrawlVersion
}

shadowJar {
    dependsOn('licenseAndNotice')

    //  Exclude driver unnecessary classes.
    exclude 'org/apache/calcite/jdbc/Driver*'
    exclude 'org/apache/calcite/avatica/remote/Driver*'
    exclude 'org/apache/commons/dbcp2/PoolingDriver*'

    dependencies {
        exclude(dependency('org.slf4j:.*'))
        exclude(dependency('org.codehaus.janino::'))
    }
}
