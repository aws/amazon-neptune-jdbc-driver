plugins {
    id 'java'
    id "com.github.spotbugs" version "5.0.11"
    id 'checkstyle'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
group 'software.aws.neptune.jdbc'
version project.hasProperty("BETA_VERSION") ? "${project.MAJOR_VERSION}.${project.MINOR_VERSION}.${project.PATCH_VERSION}-beta.${project.BETA_VERSION}" : "${project.MAJOR_VERSION}.${project.MINOR_VERSION}.${project.PATCH_VERSION}"
description 'neptune-jdbc-driver'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc.destinationDir
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Amazon Neptune JDBC Driver"
                packaging = "jar"
                url = "https://github.com/aws/amazon-neptune-jdbc-driver"
                description = "Amazon Neptune JDBC Driver"
                scm {
                    connection = "scm:git@github.com:aws/amazon-neptune-jdbc-driver.git"
                    developerConnection = "scm:git@github.com:aws/amazon-neptune-jdbc-driver.git"
                    url = "git@github.com:aws/amazon-neptune-jdbc-driver.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://github.com/aws/amazon-neptune-jdbc-driver/blob/develop/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "amazonwebservices"
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype-staging"
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
                password project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
            }
        }
    }

    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)
}

signing {
    required { gradle.taskGraph.hasTask("publishShadowPublicationToSonatype-stagingRepository") }
    sign publishing.publications.shadow
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
}

// Silently agree to build scan terms.
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.events("passed", "skipped", "failed")
}

/**
 * CheckStyle Plugin
 */
apply plugin: 'checkstyle'
checkstyle {
    toolVersion '8.37'
    configFile file("config/checkstyle/checkstyle-rules.xml")
    ignoreFailures = false
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

/**
 * SpotBugs Plugin
 */
spotbugs {
    showStackTraces = false
    reportsDir = file("$buildDir/reports/spotbugs")
    ignoreFailures = false
    includeFilter = file("config/spotbugs/spotbugs-exclude.xml")
}
spotbugsMain {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main.xml")
        }
    }
}
spotbugsTest {
    // Configure HTML report
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test.xml")
        }
    }
}

task checkSpotBugsMainReport {
    doLast {
        def xmlReport = spotbugsMain.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

tasks.register('licenseAndNotice') {
    copy {
        from "${rootDir}/LICENSE"
        into 'src/main/resources'
    }
    copy {
        from "${rootDir}/NOTICE"
        into 'src/main/resources'
    }
}

task checkSpotBugsTestReport {
    doLast {
        def xmlReport = spotbugsTest.reports.getByName("XML")
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def bugsFound = slurped.BugInstance.size()
        slurped.BugInstance.each {
            println "SpotBugs Error"
            println "\tShort Message:\t\t${it.ShortMessage}"
            println "\tLong Message:\t\t${it.LongMessage}"
            println "\tSource of Error:\t${it.SourceLine.Message}"
        }
        if (bugsFound > 0) {
            throw new Exception("Encountered SpotBugs errors, see above.")
        }
    }
}

spotbugsMain.finalizedBy checkSpotBugsMainReport
spotbugsTest.finalizedBy checkSpotBugsTestReport

task writeProperties(type: WriteProperties) {
    outputFile("$projectDir/src/main/resources/project.properties")
    property("driver.major.version", MAJOR_VERSION)
    property("driver.minor.version", MINOR_VERSION)
    property("driver.full.version", project.version)
}

/**
 * JaCoCo Plugin
 */
jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [])
        }))
    }
}
test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
            ]
            limit {
                counter = 'LINE'
                minimum = 0.00
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.00
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

/**
 * License Plugin
 */
license {
    header =  project.file('license-header.txt')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    exclude "**/*.properties"
    exclude "**/*.jar"
    headerDefinitions {
        slash_star_with_space {
            firstLine = '/*'
            endLine   = ' *\n */\n'
            beforeEachLine = ' * '
            firstLineDetectionPattern = '/\\*'
            lastLineDetectionPattern  = ' \\*\n \\*/\n'
        }
    }
    mapping {
        java = 'slash_star_with_space'
    }
}

repositories {
    mavenCentral()
}

ext {
    calciteVersion = '1.28.0'
    log4jVersion = '2.16.0'
    lombokVersion = '1.18.16'
    jupiterVersion = '5.4.0'
    neo4jDBVersion = '3.5.19'
    neo4jDriverVersion = '4.0.0'
    puppyCrawlVersion = '8.8'
    findBugsVersion = '3.0.1'
    awsSdkVersion = '1.11.932'
    gremlinVersion = '3.4.8'
    slf4jVersion = '1.7.29'
    rdf4jVersion = '3.5.0'
    amazonSigv4SignerVersion = '2.4.0'
    nettyVersion = '4.1.52.Final'
    immutablesVersion = '2.8.8'
}

subprojects {
    tasks.withType(Test) {
        // Gradle documentation suggests using this number of cores.
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

dependencies {
    // Local sql-gremlin build.
    implementation project(":sql-gremlin")

    // Dependencies
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    implementation group: 'org.apache.tinkerpop', name: 'gremlin-driver', version: gremlinVersion
    implementation group: 'com.amazonaws', name: 'amazon-neptune-sparql-java-sigv4', version: amazonSigv4SignerVersion
    implementation group: 'com.amazonaws', name: 'amazon-neptune-gremlin-java-sigv4', version: amazonSigv4SignerVersion
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'io.netty', name: 'netty-all', version: nettyVersion
    implementation group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: neo4jDriverVersion
    implementation group: 'org.apache.jena', name: 'jena-arq', version: '3.17.0'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4jVersion
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    implementation group: 'org.apache.calcite', name: 'calcite-core', version: calciteVersion
    implementation group: 'org.apache.calcite', name: 'calcite-linq4j', version: calciteVersion
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compileOnly group: 'com.puppycrawl.tools', name: 'checkstyle', version: puppyCrawlVersion
    compileOnly group: 'org.immutables', name: 'value', version: immutablesVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    // Testing
    testImplementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.1.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.1.0'
    testImplementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4'
    testImplementation group: 'org.neo4j.test', name: 'neo4j-harness', version: neo4jDBVersion
    testImplementation group: 'org.neo4j.community', name: 'it-test-support', version: neo4jDBVersion
    testImplementation group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jDBVersion, classifier: "tests"
    testImplementation group: 'org.neo4j', name: 'neo4j-io', version: neo4jDBVersion, classifier: "tests"
    testImplementation group: 'com.google.code.findbugs', name: 'annotations', version: findBugsVersion
    testImplementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    testImplementation group: 'org.apache.jena', name: 'jena-fuseki-main', version: '3.17.0'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testCompileOnly group: 'com.google.code.findbugs', name: 'annotations', version: findBugsVersion
    testCompileOnly group: 'com.puppycrawl.tools', name: 'checkstyle', version: puppyCrawlVersion
}

shadowJar {
    dependsOn('licenseAndNotice')

    //  Exclude driver unnecessary classes.
    exclude 'org/apache/calcite/avatica/remote/Driver*'
    exclude 'org/apache/commons/dbcp2/PoolingDriver*'
    exclude 'META-INF/NOTICE*'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/licenses/*'

    // Remove any unused dependencies
    minimize {
        exclude(dependency('org.apache.calcite::'))
        exclude(dependency('org.apache.tinkerpop::'))
        exclude(dependency('org.apache.log4j.*::'))
        exclude(dependency('com.jcraft::'))
    }

    // NOTE: DO NOT relocate 'javax' 'org.apache.log4j', 'org.codehaus'
    // Relocate (shadow) the following packages.
    relocate 'org.yaml', 'shadow.org.yaml'
    relocate 'org.twilmes', 'shadow.org.twilmes'
    relocate 'org.reactivestreams', 'shadow.org.reactivestreams'
    relocate 'org.pentaho', 'shadow.org.pentaho'
    relocate 'org.objectweb', 'shadow.org.objectweb'
    relocate 'org.neo4j', 'shadow.org.neo4j'
    relocate 'org.joda', 'shadow.org.joda'
    relocate 'org.javatuples', 'shadow.org.javatuples'
    relocate 'org.eclipse', 'shadow.org.eclipse'
    relocate 'org.checkerframework', 'shadow.org.checkerframework'
    relocate 'org.apiguardian', 'shadow.org.apiguardian'
    relocate 'org.apache.tinkerpop', 'shadow.org.apache.tinkerpop'
    relocate 'org.apache.thrift', 'shadow.org.apache.thrift'
    relocate 'org.apache.jena', 'shadow.org.apache.jena'
    relocate 'org.apache.ivy', 'shadow.org.apache.ivy'
    relocate 'org.apache.http', 'shadow.org.apache.tinkerhttp'
    relocate 'org.apache.groovy', 'shadow.org.apache.groovy'
    relocate 'org.apache.commons', 'shadow.org.apache.commons'
    relocate 'org.apache.calcite', 'shadow.org.apache.calcite'
    relocate 'net', 'shadow.net'
    relocate 'io', 'shadow.io'
    relocate 'groovyjarjarpicocli', 'shadow.groovyjarjarpicocli'
    relocate 'groovyjarjarasm', 'shadow.groovyjarjarasm'
    relocate 'groovyjarjarantlr', 'shadow.groovyjarjarantlr'
    relocate 'groovy', 'shadow.groovy'
    relocate 'com.amazon', 'shadow.com.amazon'
    relocate 'com.amazonaws', 'shadow.com.amazonaws'
    relocate 'com.carrotsearch', 'shadow.com.carrotsearch'
    relocate 'com.google', 'shadow.com.google'
    relocate 'com.ersi', 'shadow.com.ersi'
    relocate 'com.github', 'shadow.com.github'
    relocate 'com.jayway', 'shadow.com.jayway'
    relocate 'com.jcabi', 'shadow.com.jcabi'
    relocate 'com.jcraft', 'shadow.com.jcraft'
    relocate 'com.squareup', 'shadow.com.squareup'
    relocate 'com.yahoo', 'shadow.com.yahoo'
}
